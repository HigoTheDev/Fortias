import { _decorator, Component, Node, Vec3, sp, Collider2D, Contact2DType, IPhysics2DContact, Prefab, instantiate, Vec2, RigidBody2D } from 'cc';
import { GoblinController } from 'db://assets/Scripts/Enemies/GoblinController';
const { ccclass, property } = _decorator;

// Enum cho c√°c tr·∫°ng th√°i c·ªßa State Machine
enum SupportState {
    IDLE = 0,
    ATTACK = 1,
    ULTIMATE = 2
}

@ccclass('Support')
export class Support extends Component {
    
    @property(sp.Skeleton)
    spine: sp.Skeleton = null!;
    
    @property(Prefab)
    public bulletPrefab: Prefab = null!;
    
    @property
    private detectionRange: number = 200; // Ph·∫°m vi ph√°t hi·ªán Goblin
    
    @property
    private attackRange: number = 150; // Ph·∫°m vi t·∫•n c√¥ng
    
    @property
    private bulletSpeed: number = 300; // T·ªëc ƒë·ªô ƒë·∫°n
    
    @property
    private attackCooldown: number = 1.5; // Th·ªùi gian ngh·ªâ gi·ªØa c√°c ƒë·ª£t t·∫•n c√¥ng
    
    private currentState: SupportState = SupportState.IDLE;
    private targetGoblin: GoblinController = null;
    private lastAttackTime: number = 0;
    private originalScale: Vec3 = new Vec3(1, 1, 1);
    
    start() {
        // Kh·ªüi t·∫°o spine n·∫øu ch∆∞a c√≥
        if (!this.spine) {
            this.spine = this.getComponentInChildren(sp.Skeleton);
        }
        
        // üî• S·ª¨A: Ki·ªÉm tra spine c√≥ t·ªìn t·∫°i kh√¥ng
        if (!this.spine) {
            console.error("Support: Kh√¥ng t√¨m th·∫•y Spine component!");
            return;
        }
        
        // L∆∞u scale g·ªëc ƒë·ªÉ flip nh√¢n v·∫≠t
        this.originalScale = this.node.getScale();
        
        // üî• S·ª¨A: ƒê·∫£m b·∫£o animation idle ƒë∆∞·ª£c set ngay t·ª´ ƒë·∫ßu
        this.setAnimation("idle", true);
        
        // B·∫Øt ƒë·∫ßu ·ªü tr·∫°ng th√°i Idle
        this.setState(SupportState.IDLE);
    }

    update(deltaTime: number) {
        this.updateStateMachine(deltaTime);
    }
    
    private updateStateMachine(deltaTime: number): void {
        switch (this.currentState) {
            case SupportState.IDLE:
                this.updateIdleState();
                break;
            case SupportState.ATTACK:
                this.updateAttackState(deltaTime);
                break;
            case SupportState.ULTIMATE:
                this.updateUltimateState();
                break;
        }
    }
    
    private updateIdleState(): void {
        // T√¨m ki·∫øm Goblin trong ph·∫°m vi
        const nearbyGoblin = this.findNearestGoblin();
        
        if (nearbyGoblin && this.getDistanceToTarget(nearbyGoblin.node) <= this.detectionRange) {
            this.targetGoblin = nearbyGoblin;
            this.setState(SupportState.ATTACK);
        }
    }
    
    private updateAttackState(deltaTime: number): void {
        // Ki·ªÉm tra xem target c√≤n h·ª£p l·ªá kh√¥ng
        if (!this.targetGoblin || !this.targetGoblin.node.isValid || this.targetGoblin.isDead) {
            this.targetGoblin = null;
            this.setState(SupportState.IDLE);
            return;
        }
        
        const distanceToTarget = this.getDistanceToTarget(this.targetGoblin.node);
        
        // N·∫øu Goblin ra kh·ªèi ph·∫°m vi t·∫•n c√¥ng, quay v·ªÅ Idle
        if (distanceToTarget > this.attackRange) {
            this.targetGoblin = null;
            this.setState(SupportState.IDLE);
            return;
        }
        
        // Th·ª±c hi·ªán t·∫•n c√¥ng n·∫øu ƒë√£ ƒë·ªß th·ªùi gian cooldown
        const currentTime = Date.now() / 1000;
        if (currentTime - this.lastAttackTime >= this.attackCooldown) {
            this.performAttack();
            this.lastAttackTime = currentTime;
        }
    }
    
    private updateUltimateState(): void {
        // TODO: Implement ultimate state logic
        // T·∫°m th·ªùi quay v·ªÅ Idle sau 3 gi√¢y
        this.scheduleOnce(() => {
            this.setState(SupportState.IDLE);
        }, 3.0);
    }
    
    private setState(newState: SupportState): void {
        if (this.currentState === newState) return;
        
        // Cleanup old state
        this.unscheduleAllCallbacks();
        
        this.currentState = newState;
        
        // Setup new state
        switch (newState) {
            case SupportState.IDLE:
                // üî• S·ª¨A: ƒê·∫£m b·∫£o animation idle ƒë∆∞·ª£c set ƒë√∫ng c√°ch
                this.scheduleOnce(() => {
                    this.setAnimation("idle", true);
                }, 0.1);
                break;
            case SupportState.ATTACK:
                // Animation s·∫Ω ƒë∆∞·ª£c set trong performAttack
                break;
            case SupportState.ULTIMATE:
                this.setAnimation("ultimate", false);
                break;
        }
    }
    
    private performAttack(): void {
        if (!this.targetGoblin || !this.targetGoblin.node.isValid) return;
        
        // Xoay nh√¢n v·∫≠t h∆∞·ªõng v·ªÅ target
        this.faceTarget(this.targetGoblin.node);
        
        // Ph√°t animation attack
        this.setAnimation("attack_range_1", false);
        
        // T·∫°o ƒë·∫°n sau 0.3 gi√¢y (th·ªùi gian animation)
        this.scheduleOnce(() => {
            this.createBullet();
        }, 0.3);
        
        // Set animation complete listener ƒë·ªÉ quay v·ªÅ idle
        if (this.spine) {
            this.spine.setCompleteListener((trackEntry) => {
                if (trackEntry.animation.name === "attack_range_1") {
                    this.setAnimation("idle", true);
                }
            });
        }
    }
    
    private createBullet(): void {
        if (!this.bulletPrefab || !this.targetGoblin || !this.targetGoblin.node.isValid) return;
        
        // T·∫°o bullet t·ª´ prefab
        const bulletNode = instantiate(this.bulletPrefab);
        this.node.parent.addChild(bulletNode);
        
        // ƒê·∫∑t v·ªã tr√≠ bullet t·∫°i v·ªã tr√≠ Support
        bulletNode.setWorldPosition(this.node.worldPosition);
        
        // T√≠nh h∆∞·ªõng b·∫Øn
        const direction = new Vec3();
        Vec3.subtract(direction, this.targetGoblin.node.worldPosition, this.node.worldPosition);
        direction.normalize();
        
        // Th√™m RigidBody2D cho bullet n·∫øu ch∆∞a c√≥
        let rigidBody = bulletNode.getComponent(RigidBody2D);
        if (!rigidBody) {
            rigidBody = bulletNode.addComponent(RigidBody2D);
        }

        // Thi·∫øt l·∫≠p velocity cho bullet
        const velocity = new Vec2(direction.x * this.bulletSpeed, direction.y * this.bulletSpeed);
        rigidBody.linearVelocity = velocity;

        // H·ªßy bullet sau 3 gi√¢y
        this.scheduleOnce(() => {
            if (bulletNode && bulletNode.isValid) {
                bulletNode.destroy();
            }
        }, 3.0);
    }
    
    private findNearestGoblin(): GoblinController | null {
        const goblins = this.node.scene.getComponentsInChildren(GoblinController);
        let nearestGoblin: GoblinController | null = null;
        let nearestDistance = Number.MAX_VALUE;
        
        for (const goblin of goblins) {
            if (goblin.isDead) continue;
            
            const distance = this.getDistanceToTarget(goblin.node);
            if (distance < nearestDistance) {
                nearestDistance = distance;
                nearestGoblin = goblin;
            }
        }
        
        return nearestGoblin;
    }
    
    private getDistanceToTarget(targetNode: Node): number {
        const distance = new Vec3();
        Vec3.subtract(distance, targetNode.worldPosition, this.node.worldPosition);
        return distance.length();
    }
    
    private faceTarget(targetNode: Node): void {
        const direction = new Vec3();
        Vec3.subtract(direction, targetNode.worldPosition, this.node.worldPosition);
        
        // üî• S·ª¨A: Logic ƒë√∫ng - n·∫øu target ·ªü b√™n tr√°i (direction.x < 0) th√¨ flip
        if (direction.x < 0) {
            // Target ·ªü b√™n tr√°i, flip nh√¢n v·∫≠t
            this.node.setScale(new Vec3(-Math.abs(this.originalScale.x), this.originalScale.y, this.originalScale.z));
        } else if (direction.x > 0) {
            // Target ·ªü b√™n ph·∫£i, gi·ªØ nguy√™n h∆∞·ªõng
            this.node.setScale(new Vec3(Math.abs(this.originalScale.x), this.originalScale.y, this.originalScale.z));
        }
    }
    
    // üî• S·ª¨A: Th√™m ki·ªÉm tra an to√†n cho setAnimation
    private setAnimation(animationName: string, loop: boolean): void {
        if (this.spine && this.spine.isValid) {
            // Ki·ªÉm tra animation hi·ªán t·∫°i ƒë·ªÉ tr√°nh set l·∫°i animation gi·ªëng nhau
            const currentAnim = this.spine.getCurrent(0);
            if (!currentAnim || currentAnim.animation.name !== animationName) {
                this.spine.setAnimation(0, animationName, loop);
            }
        } else {
            console.warn(`Support: Kh√¥ng th·ªÉ set animation '${animationName}' - spine kh√¥ng h·ª£p l·ªá`);
        }
    }
    
    // Public method ƒë·ªÉ trigger Ultimate state t·ª´ b√™n ngo√†i
    public triggerUltimate(): void {
        this.setState(SupportState.ULTIMATE);
    }
}


