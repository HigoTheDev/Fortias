import { _decorator, Component, Node, Vec3, tween, Collider2D, Contact2DType, IPhysics2DContact, Tween, CCString, Color, Sprite } from 'cc';

const { ccclass, property } = _decorator;

@ccclass('DoorController')
export class DoorController extends Component {

    // --- Thu·ªôc t√≠nh C·ª≠a ---
    @property(Node)
    leftDoor: Node = null!;

    @property(Node)
    rightDoor: Node = null!;

    @property({ tooltip: "G√≥c quay khi c·ª≠a m·ªü." })
    openAngle: number = 90;

    @property({ tooltip: "Th·ªùi gian ho√†n th√†nh animation m·ªü/ƒë√≥ng c·ª≠a." })
    duration: number = 0.5;

    @property({ type: CCString, tooltip: "T√™n (Name) c·ªßa node Player." })
    playerName: string = "Fighter";

    // üî• TH√äM M·ªöI: Thu·ªôc t√≠nh m√°u cho c·ª≠a
    @property({ group: 'Health', tooltip: "L∆∞·ª£ng m√°u t·ªëi ƒëa c·ªßa c·ª≠a." })
    maxHP: number = 200;

    private currentHP: number = 0;
    private leftDoorSprite: Sprite | null = null;
    private rightDoorSprite: Sprite | null = null;
    private originalColor: Color = Color.WHITE.clone();


    // --- Bi·∫øn n·ªôi b·ªô ---
    private _isDoorOpen: boolean = false;
    private _leftDoorTween: Tween<Node> | null = null;
    private _rightDoorTween: Tween<Node> | null = null;

    onLoad() {
        this.currentHP = this.maxHP;

        // L·∫•y component Sprite ƒë·ªÉ ƒë·ªïi m√†u sau n√†y
        this.leftDoorSprite = this.leftDoor.getComponent(Sprite);
        this.rightDoorSprite = this.rightDoor.getComponent(Sprite);
        if (this.leftDoorSprite) {
            this.originalColor = this.leftDoorSprite.color.clone();
        }

        const collider = this.getComponent(Collider2D);
        if (collider) {
            collider.sensor = true;
            collider.on(Contact2DType.BEGIN_CONTACT, this.onBeginContact, this);
            collider.on(Contact2DType.END_CONTACT, this.onEndContact, this);
        }
    }

    // üî• TH√äM M·ªöI: H√†m nh·∫≠n s√°t th∆∞∆°ng
    public takeDamage(damage: number) {
        if (this.currentHP <= 0) return; // C·ª≠a ƒë√£ h·ªèng, kh√¥ng nh·∫≠n th√™m s√°t th∆∞∆°ng

        this.currentHP -= damage;
        console.log(`C·ª≠a nh·∫≠n ${damage} s√°t th∆∞∆°ng, m√°u c√≤n l·∫°i: ${this.currentHP}`);

        // K√≠ch ho·∫°t hi·ªáu ·ª©ng ch·ªõp tr·∫Øng
        this.flashWhite();

        if (this.currentHP <= 0) {
            this.currentHP = 0;
            this.destroyDoor();
        }
    }

    // üî• TH√äM M·ªöI: Hi·ªáu ·ª©ng ch·ªõp tr·∫Øng
    private flashWhite() {
        if (!this.leftDoorSprite || !this.rightDoorSprite) return;

        // D·ª´ng c√°c tween m√†u c≈© n·∫øu c√≥
        tween(this.leftDoorSprite).stop();
        tween(this.rightDoorSprite).stop();

        // ƒê·∫∑t m√†u th√†nh tr·∫Øng
        this.leftDoorSprite.color = Color.WHITE;
        this.rightDoorSprite.color = Color.WHITE;

        // D√πng tween ƒë·ªÉ chuy·ªÉn m√†u v·ªÅ l·∫°i nh∆∞ c≈© sau 0.1 gi√¢y
        tween(this.leftDoorSprite)
            .to(0.1, { color: this.originalColor })
            .start();

        tween(this.rightDoorSprite)
            .to(0.1, { color: this.originalColor })
            .start();
    }

    // üî• TH√äM M·ªöI: H√†m ph√° h·ªßy c·ª≠a
    private destroyDoor() {
        console.log("C·ª≠a ƒë√£ b·ªã ph√° h·ªßy!");
        // Th√™m c√°c hi·ªáu ·ª©ng n·ªï, v·ª° v·ª•n t·∫°i ƒë√¢y n·∫øu mu·ªën
        this.node.destroy();
    }


    // --- Logic M·ªü/ƒê√≥ng C·ª≠a ---
    onBeginContact(selfCollider: Collider2D, otherCollider: Collider2D, contact: IPhysics2DContact | null) {
        // Ch·ªâ ph·∫£n ·ª©ng khi Player (thu·ªôc nh√≥m PLAYER) ƒëi v√†o v√πng TRIGGER
        if (otherCollider.group === 2) { // 2 l√† gi√° tr·ªã m·∫∑c ƒë·ªãnh c·ªßa nh√≥m PLAYER, b·∫°n c√≥ th·ªÉ thay ƒë·ªïi
            if (!this._isDoorOpen) {
                this.openDoor(otherCollider.node);
            }
        }
    }

    onEndContact(selfCollider: Collider2D, otherCollider: Collider2D, contact: IPhysics2DContact | null) {
        // Ch·ªâ ph·∫£n ·ª©ng khi Player (thu·ªôc nh√≥m PLAYER) r·ªùi kh·ªèi v√πng TRIGGER
        if (otherCollider.group === 2) {
            if (this.currentHP > 0 && this._isDoorOpen) { // Ch·ªâ ƒë√≥ng khi c·ª≠a ch∆∞a h·ªèng
                this.closeDoor();
            }
        }
    }

    openDoor(playerNode: Node) {
        if (this._isDoorOpen) return;
        this._isDoorOpen = true;
        this.stopCurrentTweens();
        const playerPosition = playerNode.worldPosition;
        const doorPosition = this.node.worldPosition;
        const isPlayerOnTheLeft = playerPosition.x < doorPosition.x;
        if (isPlayerOnTheLeft) {
            this._leftDoorTween = tween(this.leftDoor).to(this.duration, { eulerAngles: new Vec3(0, 0, this.openAngle) }, { easing: 'quadOut' }).start();
            this._rightDoorTween = tween(this.rightDoor).to(this.duration, { eulerAngles: new Vec3(0, 0, -this.openAngle) }, { easing: 'quadOut' }).start();
        } else {
            this._leftDoorTween = tween(this.leftDoor).to(this.duration, { eulerAngles: new Vec3(0, 0, -this.openAngle) }, { easing: 'quadOut' }).start();
            this._rightDoorTween = tween(this.rightDoor).to(this.duration, { eulerAngles: new Vec3(0, 0, this.openAngle) }, { easing: 'quadOut' }).start();
        }
    }

    closeDoor() {
        if (!this._isDoorOpen) return;
        this._isDoorOpen = false;
        this.stopCurrentTweens();
        this._leftDoorTween = tween(this.leftDoor).to(this.duration, { eulerAngles: new Vec3(0, 0, 0) }, { easing: 'quadIn' }).start();
        this._rightDoorTween = tween(this.rightDoor).to(this.duration, { eulerAngles: new Vec3(0, 0, 0) }, { easing: 'quadIn' }).start();
    }

    private stopCurrentTweens() {
        if (this._leftDoorTween) {
            this._leftDoorTween.stop();
            this._leftDoorTween = null;
        }
        if (this._rightDoorTween) {
            this._rightDoorTween.stop();
            this._rightDoorTween = null;
        }
    }
}