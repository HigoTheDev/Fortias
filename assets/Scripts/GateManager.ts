// File: GateManager.ts
import { _decorator, Component, Node, Prefab, instantiate, Vec3, tween, v3, CCInteger } from 'cc';
import { CoinGateController } from './CoinGateController';

const { ccclass, property } = _decorator;

@ccclass('GateManager')
export class GateManager extends Component {

    public static instance: GateManager = null!;

    @property({ type: Prefab, tooltip: "Prefab c·ªßa CoinGate ƒë·ªÉ spawn." })
    public gatePrefab: Prefab = null!;

    @property({
        type: [Node],
        tooltip: "Danh s√°ch c√°c Node v·ªã tr√≠ ƒë·ªÉ spawn c·ªïng v√† tr·ª• THEO TH·ª® T·ª∞."
    })
    public spawnPoints: Node[] = [];

    @property({
        type: [Prefab],
        tooltip: "Danh s√°ch c√°c Prefab Tr·ª•, THEO TH·ª® T·ª∞ t∆∞∆°ng ·ª©ng v·ªõi Spawn Points."
    })
    public towerPrefabs: Prefab[] = [];

    @property({
        type: [CCInteger],
        tooltip: "Danh s√°ch chi ph√≠ (s·ªë Coin) cho m·ªói c·ªïng, THEO TH·ª® T·ª∞ t∆∞∆°ng ·ª©ng v·ªõi Spawn Points."
    })
    public gateCosts: number[] = [30, 50, 60];

    private currentSpawnIndex: number = -1;

    onLoad() {
        if (GateManager.instance === null) {
            GateManager.instance = this;
        } else {
            this.destroy();
        }
    }

    start() {
        if (!this.gatePrefab || this.spawnPoints.length === 0) {
            console.error("Ch∆∞a g√°n Gate Prefab ho·∫∑c Spawn Points cho GateManager!");
            return;
        }

        if (this.spawnPoints.length !== this.towerPrefabs.length || this.spawnPoints.length !== this.gateCosts.length) {
            console.warn("S·ªë l∆∞·ª£ng Spawn Points, Tower Prefabs, v√† Gate Costs kh√¥ng b·∫±ng nhau! ƒêi·ªÅu n√†y c√≥ th·ªÉ g√¢y l·ªói.");
        }

        this.spawnNextGate();
    }

    public onGateUnlocked(unlockedPoint: Node) {
        this.spawnTowerAtPoint(unlockedPoint);

        this.scheduleOnce(() => {
            this.spawnNextGate();
        }, 1.5);
    }

    private spawnNextGate() {
        this.currentSpawnIndex++;

        if (this.currentSpawnIndex >= this.spawnPoints.length) {
            console.log("üéâ ƒê√£ m·ªü kh√≥a t·∫•t c·∫£ c√°c c·ªïng!");
            return;
        }

        const spawnPoint = this.spawnPoints[this.currentSpawnIndex];
        const cost = this.gateCosts[this.currentSpawnIndex];

        if (cost === undefined) {
            console.error(`Kh√¥ng t√¨m th·∫•y chi ph√≠ cho c·ªïng t·∫°i v·ªã tr√≠ th·ª© ${this.currentSpawnIndex + 1}!`);
            return;
        }

        this.spawnGateAtPoint(spawnPoint, cost);
    }

    private spawnGateAtPoint(point: Node, cost: number) {
        if (!this.gatePrefab) return;
        const gate = instantiate(this.gatePrefab);
        this.node.addChild(gate);
        gate.setWorldPosition(point.worldPosition);

        const gateController = gate.getComponent(CoinGateController);
        if (gateController) {
            gateController.initialize(point, cost);
        }
    }

    private spawnTowerAtPoint(point: Node) {
        const pointIndex = this.spawnPoints.indexOf(point);

        if (pointIndex === -1) {
            console.error("L·ªói: Kh√¥ng t√¨m th·∫•y ƒëi·ªÉm spawn trong danh s√°ch.", point);
            return;
        }

        if (pointIndex >= this.towerPrefabs.length || !this.towerPrefabs[pointIndex]) {
            console.error(`Ch∆∞a g√°n Tower Prefab cho v·ªã tr√≠ th·ª© ${pointIndex + 1}!`);
            return;
        }

        const towerPrefabToSpawn = this.towerPrefabs[pointIndex];
        const tower = instantiate(towerPrefabToSpawn);
        this.node.addChild(tower);
        tower.setWorldPosition(point.worldPosition);

        // Hi·ªáu ·ª©ng spawn cho tr·ª•
        tower.scale = v3(0, 0, 0);
        tween(tower)
            .to(0.5, { scale: v3(1, 1, 1) }, { easing: 'backOut' })
            .start();
    }
}